package main.Lections.fourth;

public class ShellSort {
    /**
     * Улучшение сортировки вставками за счет совершения действий, уменьшающих кол-во
     * инверсий больше, чем на 1. Вместо одного прохода совершается несколько, причем
     * на i-м проходе сортируются подмассивы из эл-тов, отстоящих друг от друга в
     * массиве на расстояние gap_i эл-тов (т.н. приращение), а не подмассивы, состоящие
     * из соседних эл-тов.
     * На каждом проходе gap_i уменьшается. Т.к. на последнем проходе производится
     * обычная сортировка вставками, на нем обязательно gap = 1.
     * Преимущество над обычной сортировкой вставками в том, что эл-ты итеративно
     * передвигаются на gap_i, а не на 1 шагов, что дает более близкое расположение эл-тов
     * к своим итоговым местам перед последним проходом. Тогда на последнем проходе не
     * требуется совершать большое кол-во обменов.
     */
    public static <E extends Comparable<? super E>> void shellSort(E[] arr) {
        int gap = 1;
        while (gap < arr.length / 3) {
            gap = 3 * gap + 1;
        }

        while (gap > 0) { // по всей посл-ти смещений
            for (int i = gap; i != arr.length; ++i) {
                E tmp = arr[i]; // чтобы копировать arr[i] только один раз
                int j;
                for (j = i; j >= gap; j -= gap) {
                    // начиная с текущего i назад с шагом gap проверять эл-ты
                    if (tmp.compareTo(arr[j - gap]) < 0) {
                        arr[j] = arr[j - gap];
                    } else {
                        break;
                    }
                }
                arr[j] = tmp; // j -- окончательная позиция для исходного arr[i]
            }
            gap /= 3;
        }
    }
}
